name: 持续集成

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_CONFIGURATION: Debug
  PROJECT_NAME: TinyPin

jobs:
  build-test:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, Win32, ARM64]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: 创建构建目录
      run: mkdir -p build/compile/Debug/${{ matrix.platform }}

    - name: 构建 ${{ matrix.platform }} 版本
      run: |
        msbuild TinyPin.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=${{ matrix.platform }} /p:OutDir="build\compile\Debug\${{ matrix.platform }}\" /nologo /verbosity:minimal

    - name: 验证构建结果
      shell: pwsh
      run: |
        $platform = "${{ matrix.platform }}"
        $exePath = "build\compile\Debug\$platform\TinyPin.exe"
        
        if (Test-Path $exePath) {
          $size = (Get-Item $exePath).Length
          Write-Host "✓ $platform 版本构建成功 (大小: $([math]::Round($size/1MB, 2)) MB)"
          
          # 检查文件是否为有效的PE文件
          $header = Get-Content $exePath -Encoding Byte -TotalCount 2
          if ($header[0] -eq 77 -and $header[1] -eq 90) {  # MZ header
            Write-Host "✓ $platform 版本可执行文件格式正确"
          } else {
            Write-Error "✗ $platform 版本可执行文件格式错误"
            exit 1
          }
        } else {
          Write-Error "✗ $platform 版本构建失败，可执行文件未找到"
          exit 1
        }

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: TinyPin-Debug-${{ matrix.platform }}
        path: build/compile/Debug/${{ matrix.platform }}/TinyPin.exe
        retention-days: 7

  code-quality:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 代码格式检查
      shell: pwsh
      run: |
        Write-Host "🔍 检查代码格式..."
        
        # 检查文件编码（应为UTF-8无BOM）
        $files = Get-ChildItem -Path "src", "include" -Recurse -Include "*.cpp", "*.h"
        $encodingIssues = @()
        
        foreach ($file in $files) {
          $content = Get-Content $file.FullName -Raw -Encoding Byte
          if ($content.Length -ge 3 -and $content[0] -eq 0xEF -and $content[1] -eq 0xBB -and $content[2] -eq 0xBF) {
            $encodingIssues += $file.FullName
          }
        }
        
        if ($encodingIssues.Count -gt 0) {
          Write-Warning "以下文件包含BOM，应使用UTF-8无BOM格式："
          $encodingIssues | ForEach-Object { Write-Warning "  - $_" }
        } else {
          Write-Host "✓ 所有源文件编码格式正确"
        }
        
        # 检查行尾格式（应为LF）
        $crlfFiles = @()
        foreach ($file in $files) {
          $content = Get-Content $file.FullName -Raw
          if ($content -match "`r`n") {
            $crlfFiles += $file.FullName
          }
        }
        
        if ($crlfFiles.Count -gt 0) {
          Write-Warning "以下文件使用CRLF行尾，应使用LF："
          $crlfFiles | ForEach-Object { Write-Warning "  - $_" }
        } else {
          Write-Host "✓ 所有源文件行尾格式正确"
        }

    - name: 项目结构检查
      shell: pwsh
      run: |
        Write-Host "🏗️ 检查项目结构..."
        
        # 检查必要的目录结构
        $requiredDirs = @("src", "include", "assets", "resources", "tools")
        $missingDirs = @()
        
        foreach ($dir in $requiredDirs) {
          if (-not (Test-Path $dir)) {
            $missingDirs += $dir
          }
        }
        
        if ($missingDirs.Count -gt 0) {
          Write-Error "缺少必要的目录："
          $missingDirs | ForEach-Object { Write-Error "  - $_" }
          exit 1
        } else {
          Write-Host "✓ 项目目录结构完整"
        }
        
        # 检查关键文件
        $requiredFiles = @(
          "TinyPin.sln",
          "TinyPin.vcxproj", 
          "LICENSE.txt",
          "README.md",
          "tools/Scripts/TinyPin.iss",
          "tools/Scripts/build.bat"
        )
        
        $missingFiles = @()
        foreach ($file in $requiredFiles) {
          if (-not (Test-Path $file)) {
            $missingFiles += $file
          }
        }
        
        if ($missingFiles.Count -gt 0) {
          Write-Error "缺少必要的文件："
          $missingFiles | ForEach-Object { Write-Error "  - $_" }
          exit 1
        } else {
          Write-Host "✓ 关键文件完整"
        }

  summary:
    runs-on: windows-latest
    needs: [build-test, code-quality]
    if: always()
    
    steps:
    - name: CI结果汇总
      shell: pwsh
      run: |
        $buildResult = "${{ needs.build-test.result }}"
        $qualityResult = "${{ needs.code-quality.result }}"
        
        Write-Host "📊 CI 执行结果汇总"
        Write-Host "===================="
        Write-Host "构建测试: $buildResult"
        Write-Host "代码质量: $qualityResult"
        Write-Host ""
        
        if ($buildResult -eq "success" -and $qualityResult -eq "success") {
          Write-Host "🎉 所有检查通过！代码可以合并到 release 分支"
          exit 0
        } else {
          Write-Host "❌ 存在问题，请修复后重新提交"
          exit 1
        }