name: 自动构建和发布

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

env:
  # 构建配置
  BUILD_CONFIGURATION: Release
  # 项目名称
  PROJECT_NAME: TinyPin

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: 获取版本信息
      id: version
      shell: pwsh
      run: |
        # 从git标签获取版本，如果没有标签则使用日期
        $tag = git describe --tags --abbrev=0 2>$null
        if ($tag) {
          $version = $tag -replace '^v', ''
        } else {
          $version = "1.0.$(Get-Date -Format 'yyyyMMdd')"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "tag=v$version" >> $env:GITHUB_OUTPUT
        echo "构建版本: $version"

    - name: 创建构建目录
      run: |
        mkdir -p build/compile/Release/x64
        mkdir -p build/compile/Release/Win32
        mkdir -p build/compile/Release/ARM64
        mkdir -p build/installer

    - name: 构建 x64 版本
      run: |
        msbuild TinyPin.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=x64 /p:OutDir="build\compile\Release\x64\" /nologo /verbosity:minimal

    - name: 构建 Win32 版本
      run: |
        msbuild TinyPin.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=Win32 /p:OutDir="build\compile\Release\Win32\" /nologo /verbosity:minimal

    - name: 构建 ARM64 版本
      run: |
        msbuild TinyPin.sln /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=ARM64 /p:OutDir="build\compile\Release\ARM64\" /nologo /verbosity:minimal

    - name: 验证构建结果
      shell: pwsh
      run: |
        $platforms = @("x64", "Win32", "ARM64")
        foreach ($platform in $platforms) {
          $exePath = "build\compile\Release\$platform\TinyPin.exe"
          if (Test-Path $exePath) {
            $size = (Get-Item $exePath).Length
            Write-Host "✓ $platform 版本构建成功 (大小: $([math]::Round($size/1MB, 2)) MB)"
          } else {
            Write-Error "✗ $platform 版本构建失败"
            exit 1
          }
        }

    - name: 创建 x64 安装包
      shell: pwsh
      run: |
        $isccPath = "tools\InnoSetup6\ISCC.exe"
        $scriptPath = "tools\Scripts\TinyPin.iss"
        $sourcePath = "build\compile\Release\x64\TinyPin.exe"
        $outputDir = "build\installer"
        
        & $isccPath $scriptPath /Dp=x64 /Ds=$sourcePath /Do=$outputDir /Dv=${{ steps.version.outputs.version }}
        if ($LASTEXITCODE -ne 0) {
          Write-Error "x64 安装包创建失败"
          exit 1
        }

    - name: 创建 Win32 安装包
      shell: pwsh
      run: |
        $isccPath = "tools\InnoSetup6\ISCC.exe"
        $scriptPath = "tools\Scripts\TinyPin.iss"
        $sourcePath = "build\compile\Release\Win32\TinyPin.exe"
        $outputDir = "build\installer"
        
        & $isccPath $scriptPath /Dp=Win32 /Ds=$sourcePath /Do=$outputDir /Dv=${{ steps.version.outputs.version }}
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Win32 安装包创建失败"
          exit 1
        }

    - name: 创建 ARM64 安装包
      shell: pwsh
      run: |
        $isccPath = "tools\InnoSetup6\ISCC.exe"
        $scriptPath = "tools\Scripts\TinyPin.iss"
        $sourcePath = "build\compile\Release\ARM64\TinyPin.exe"
        $outputDir = "build\installer"
        
        & $isccPath $scriptPath /Dp=arm64 /Ds=$sourcePath /Do=$outputDir /Dv=${{ steps.version.outputs.version }}
        if ($LASTEXITCODE -ne 0) {
          Write-Error "ARM64 安装包创建失败"
          exit 1
        }

    - name: 验证安装包
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $platforms = @("x64", "Win32", "arm64")
        $installers = @()
        
        foreach ($platform in $platforms) {
          $installerPath = "build\installer\TinyPin-$version-$platform-setup.exe"
          if (Test-Path $installerPath) {
            $size = (Get-Item $installerPath).Length
            Write-Host "✓ $platform 安装包创建成功 (大小: $([math]::Round($size/1MB, 2)) MB)"
            $installers += $installerPath
          } else {
            Write-Error "✗ $platform 安装包创建失败"
            exit 1
          }
        }
        
        # 将安装包路径保存到环境变量
        $installersJson = $installers | ConvertTo-Json -Compress
        echo "INSTALLERS=$installersJson" >> $env:GITHUB_ENV

    - name: 创建发布说明
      id: release_notes
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        $date = Get-Date -Format "yyyy年MM月dd日"
        
        $releaseNotes = @"
        ## TinyPin $version 发布

        **发布日期**: $date

        ### 📦 安装包下载

        - **TinyPin-$version-x64-setup.exe** - 适用于 64 位 Windows 系统
        - **TinyPin-$version-Win32-setup.exe** - 适用于 32 位和 64 位 Windows 系统
        - **TinyPin-$version-arm64-setup.exe** - 适用于 ARM64 Windows 系统

        ### 🔧 系统要求

        - Windows 7 SP1 或更高版本
        - 对应的系统架构 (x64/x86/ARM64)

        ### 📝 更新内容

        此版本包含最新的功能改进和错误修复。

        ### 🚀 安装说明

        1. 下载适合您系统架构的安装包
        2. 运行安装程序并按照提示完成安装
        3. 安装完成后可在开始菜单找到 TinyPin

        ---
        
        **完整更改日志**: https://github.com/${{ github.repository }}/compare/v$version...release
        "@
        
        # 将发布说明保存到文件
        $releaseNotes | Out-File -FilePath "release_notes.md" -Encoding UTF8
        echo "notes_file=release_notes.md" >> $env:GITHUB_OUTPUT

    - name: 创建 GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/release'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: TinyPin ${{ steps.version.outputs.version }}
        body_path: ${{ steps.release_notes.outputs.notes_file }}
        draft: false
        prerelease: false
        files: |
          build/installer/TinyPin-${{ steps.version.outputs.version }}-x64-setup.exe
          build/installer/TinyPin-${{ steps.version.outputs.version }}-Win32-setup.exe
          build/installer/TinyPin-${{ steps.version.outputs.version }}-arm64-setup.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: TinyPin-${{ steps.version.outputs.version }}-Installers
        path: |
          build/installer/*.exe
        retention-days: 30

    - name: 构建完成通知
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.version }}"
        Write-Host "🎉 TinyPin $version 构建完成！"
        Write-Host ""
        Write-Host "📦 生成的安装包："
        Get-ChildItem "build\installer\*.exe" | ForEach-Object {
          $size = [math]::Round($_.Length/1MB, 2)
          Write-Host "  - $($_.Name) ($size MB)"
        }
        
        if ("${{ github.event_name }}" -eq "push" -and "${{ github.ref }}" -eq "refs/heads/release") {
          Write-Host ""
          Write-Host "🚀 已自动发布到 GitHub Releases: ${{ steps.version.outputs.tag }}"
          Write-Host "🔗 发布页面: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
        }